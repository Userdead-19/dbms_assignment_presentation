// #include<stdio.h>
// #include<stdlib.h>
// #include<unistd.h>
// #include<fcntl.h>

// #define BUFFER_SIZE 1024

// void main(){
//     char srcFile[] = "source.txt";
//     char destFile[]="dest.txt";
//     int fd_src,fd_des;
//     ssize_t bread,bwrite;
    
//     char buffer[BUFFER_SIZE];
//     fd_src=open(srcFile,O_RDONLY);
//     if(fd_src==-1){
//         perror("Error in opening the source file");
//         exit(EXIT_FAILURE);
//     }

//     fd_des=open(destFile,O_WRONLY || O_CREAT || O_TRUNC , 0644);
//     if(fd_des==-1){
//         perror("Error in reading the destination file");
//         exit(EXIT_FAILURE);
//     }
//     while((bread=read(fd_src,buffer,BUFFER_SIZE))>0){
//         bwrite=write(fd_des,buffer,bread);
//         if(bread!=bwrite){
//             perror("Error in writing the file");
//             exit(EXIT_FAILURE);
//         }
//     }
//     if(close(fd_src)==-1){
//         perror("Error in closing the file");
//         exit(EXIT_FAILURE);
//     }if(close(fd_des)==-1){
//         perror("Error in closing the dest file");
//         exit(EXIT_FAILURE);
//     }
//     printf("File copied success fully");
// }

/// program 2

// #include<stdio.h>
// #include<stdlib.h>
// #include<fcntl.h>
// #include<unistd.h>

// #define BUFFER_SIZE 1024

// void main(){
//     char srcFile[]="source.txt";
//     int fd;
//     ssize_t bread;
//     int count=0;
//     char buffer[BUFFER_SIZE];

//     fd=open(srcFile,O_RDONLY);
//     if(fd==-1){
//         perror("Error in opening the file");
//         exit(EXIT_FAILURE);
//     }
//     while((bread=read(fd,buffer,BUFFER_SIZE))>0){
//         count+=bread;
//     }
//     if(bread==-1){
//         perror("Error in reading the file");
//         exit(EXIT_FAILURE);
//     }

//     if(close(fd)==-1){
//         perror("Error in closing the File");
//         exit(EXIT_FAILURE);
//     }
//     printf("The count is %d",count);

// }


/// program 3

// #include<stdio.h>
// #include<stdlib.h>
// #include<unistd.h>
// #include<sys/wait.h>

// void main(){
//     pid_t pid1,pid2;
//     int status1,status2;

//     pid1=fork();
//     if(pid1==0){
//         printf("Child 1 process is :%d\n",getpid());
//         sleep(3);
//         printf("Child 1 process is :%d\n",getpid());
//         exit(0);
//     }else if(pid1<0){
//         perror("Error in creating the PID");
//         exit(EXIT_FAILURE);
//     }

//     pid2=fork();
//     if(pid2==0){
//         printf("Child 1 process is :%d\n",getpid());
//         sleep(3);
//         printf("Child 1 process is :%d\n",getpid());
//         exit(0);
//     }else if(pid2<0){
//         perror("Error in creating the PID");
//         exit(EXIT_FAILURE);
//     }

//     printf("Parent process (PID: %d) waiting for Child 1 (PID: %d) and Child 2 (PID: %d) to finish.\n", getpid(), pid1, pid2);
//     waitpid(pid1, &status1, 0);
//     waitpid(pid2, &status2, 0);
//     printf("Parent process (PID: %d) finished waiting.\n", getpid());

// }


////program 4

// #include<stdio.h>
// #include<stdlib.h>
// #include<unistd.h>
// #include<fcntl.h>
// #include<sys/wait.h>

// #define FILE_NAME "Relation.txt"
// #define CONTENT_TYPE_LENGTH 1024

// void main(){
//     pid_t pid1;
//     int status,fd;
//     char content[CONTENT_TYPE_LENGTH];

//     pid1=fork();
//     if(pid1==0){
//         printf("The child process id is :%d and the file to be created is :%s\n",getpid(),FILE_NAME);

//         fd=open(FILE_NAME,O_WRONLY |O_CREAT |O_TRUNC , 0644);
//         if(fd==-1){
//             perror("Error in opening the file");
//             exit(EXIT_FAILURE);
//         }

//         if(close(fd)==-1){
//             perror("Error in Closing the file");
//             exit(EXIT_FAILURE);
//         }

//         printf("Child process has been executed and the process is Terminated ..!\n");
//         exit(0);
//     }else if(pid1>0){
//         printf("the parent process id is :%d and the waiting for child process to create :%d\n",getpid(),pid1);
//         waitpid(pid1,&status,0);
//         printf("The child process has been completed and the file has been created :%s\n",FILE_NAME);
//         fd=open(FILE_NAME,O_WRONLY);
//         if(fd==-1){
//             perror("Error in opening the file");
//             exit(EXIT_FAILURE);
//         }
//         printf("Enter the content that is to be written in the file:");
//         fgets(content,CONTENT_TYPE_LENGTH,stdin);
//         if(write(fd,content,sizeof(content))==-1){
//             perror("Error in writing the contents into the file ");
//             exit(EXIT_FAILURE);
//         }
//         if(close(fd)==-1){
//             perror("Error in closing the file");
//             exit(EXIT_FAILURE);
//         }

//         printf("The content has been written into the file :%d -- %s",getpid(),FILE_NAME);
//     }else{
//         perror("Error in creating the process");
//         exit(EXIT_FAILURE); 
//     }
// }


