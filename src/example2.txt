#include <stdio.h>
#include <stdlib.h>
#include <time.h>


struct node
{
    int id, at, bt, tat, wt, ct, ended,timeran,priority;
};

typedef struct node node;

node *getNode(int at, int bt, int id,int priority)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->id = id;
    newNode->at = at;
    newNode->bt = bt;
    newNode->priority = priority;
    newNode->tat = newNode->wt = newNode->ct = newNode->ended = newNode->timeran = 0;
    return newNode;
}

void sort(node *arr, int n)
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n - 1; j++)
        {
            if (arr[j].priority > arr[j + 1].priority)
            {
                node temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp;
            }
        }
}

void priority(node *arr, int n)
{
    sort(arr,n);
    int time = 0;
    int completed = 0;
    while (completed != n)
    {
        for (int i = 0; i < n; i++)
        {
            if (arr[i].at <= time && arr[i].ended == 0)
            {
                if(++arr[i].timeran == arr[i].bt){
                    arr[i].ended = 1;
                    arr[i].ct = time;
                    arr[i].tat = arr[i].ct - arr[i].at;
                    arr[i].wt = arr[i].tat - arr[i].bt;
                    completed++;
                    printf("\nPID: %d Time at end: %d\n",arr[i].id,time);
                }
                printf("%d",arr[i].id);
                
                time++;
                i = 0;
            }
        }
            time++;
    }
}

void calcAverage(node* arr,int n){
    int sumtat;
    int sumwt;
}

void printList(node *arr, int n)
{

    for (int i = 0; i < n; i++)
    {
        printf("Process ID: %d,Arrival Time: %d, Burst Time: %d, Turnaround Time: %d, Waiting Time: %d, Completion Time: %d, Priority: %d\n",
               arr[i].id, arr[i].at, arr[i].bt, arr[i].tat, arr[i].wt, arr[i].ct,arr[i].priority);
    }
    printf("\n");
}

int main()
{
    node *arr = (node *)malloc(sizeof(node) * 10);

    srand(time(0));
    for (int i = 0; i < 10; i++)
    {
        int id = i;
        int at = rand() % 10; // Random arrival time between 0 and 9
        int bt = rand() % 10 + 1;
        int priority =  rand() % 3 + 1;
        arr[i] = *getNode(at, bt, id,priority);
    }
    sort(arr,10);
    printList(arr, 10);
    sjf(arr, 10);
    printList(arr, 10);
}